# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import tinydb.table as module_0
import tinydb.utils as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "S"
    module_0.Table(str_0, str_0, persist_empty=str_0)


def test_case_1():
    str_0 = ""
    table_0 = module_0.Table(str_0, str_0, persist_empty=str_0)
    assert (
        f"{type(table_0).__module__}.{type(table_0).__qualname__}"
        == "tinydb.table.Table"
    )
    assert module_0.Table.default_query_cache_capacity == 10
    assert (
        f"{type(module_0.Table.name).__module__}.{type(module_0.Table.name).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Table.storage).__module__}.{type(module_0.Table.storage).__qualname__}"
        == "builtins.property"
    )


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    none_type_0 = None
    table_0 = module_0.Table(bool_0, none_type_0)
    assert (
        f"{type(table_0).__module__}.{type(table_0).__qualname__}"
        == "tinydb.table.Table"
    )
    assert module_0.Table.default_query_cache_capacity == 10
    assert (
        f"{type(module_0.Table.name).__module__}.{type(module_0.Table.name).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Table.storage).__module__}.{type(module_0.Table.storage).__qualname__}"
        == "builtins.property"
    )
    table_0.contains(doc_id=bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    none_type_0 = None
    module_0.Document(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\x95\xa3A\xda"
    none_type_0 = None
    table_0 = module_0.Table(none_type_0, bytes_0)
    assert (
        f"{type(table_0).__module__}.{type(table_0).__qualname__}"
        == "tinydb.table.Table"
    )
    assert module_0.Table.default_query_cache_capacity == 10
    assert (
        f"{type(module_0.Table.name).__module__}.{type(module_0.Table.name).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Table.storage).__module__}.{type(module_0.Table.storage).__qualname__}"
        == "builtins.property"
    )
    table_0.__repr__()


@pytest.mark.xfail(strict=True)
def test_case_5():
    set_0 = set()
    table_0 = module_0.Table(set_0, set_0)
    assert (
        f"{type(table_0).__module__}.{type(table_0).__qualname__}"
        == "tinydb.table.Table"
    )
    assert module_0.Table.default_query_cache_capacity == 10
    assert (
        f"{type(module_0.Table.name).__module__}.{type(module_0.Table.name).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Table.storage).__module__}.{type(module_0.Table.storage).__qualname__}"
        == "builtins.property"
    )
    table_0.update(table_0, set_0, table_0)


def test_case_6():
    none_type_0 = None
    table_0 = module_0.Table(none_type_0, none_type_0, persist_empty=none_type_0)
    assert (
        f"{type(table_0).__module__}.{type(table_0).__qualname__}"
        == "tinydb.table.Table"
    )
    assert module_0.Table.default_query_cache_capacity == 10
    assert (
        f"{type(module_0.Table.name).__module__}.{type(module_0.Table.name).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Table.storage).__module__}.{type(module_0.Table.storage).__qualname__}"
        == "builtins.property"
    )
    with pytest.raises(RuntimeError):
        table_0.contains()


@pytest.mark.xfail(strict=True)
def test_case_7():
    set_0 = set()
    table_0 = module_0.Table(set_0, set_0)
    assert (
        f"{type(table_0).__module__}.{type(table_0).__qualname__}"
        == "tinydb.table.Table"
    )
    assert module_0.Table.default_query_cache_capacity == 10
    assert (
        f"{type(module_0.Table.name).__module__}.{type(module_0.Table.name).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Table.storage).__module__}.{type(module_0.Table.storage).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = table_0.clear_cache()
    table_0.upsert(none_type_0, table_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    set_0 = set()
    table_0 = module_0.Table(set_0, set_0)
    assert (
        f"{type(table_0).__module__}.{type(table_0).__qualname__}"
        == "tinydb.table.Table"
    )
    assert module_0.Table.default_query_cache_capacity == 10
    assert (
        f"{type(module_0.Table.name).__module__}.{type(module_0.Table.name).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Table.storage).__module__}.{type(module_0.Table.storage).__qualname__}"
        == "builtins.property"
    )
    table_0.count(table_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    set_0 = set()
    table_0 = module_0.Table(set_0, set_0)
    assert (
        f"{type(table_0).__module__}.{type(table_0).__qualname__}"
        == "tinydb.table.Table"
    )
    assert module_0.Table.default_query_cache_capacity == 10
    assert (
        f"{type(module_0.Table.name).__module__}.{type(module_0.Table.name).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Table.storage).__module__}.{type(module_0.Table.storage).__qualname__}"
        == "builtins.property"
    )
    table_0.upsert(table_0, table_0)


def test_case_10():
    bool_0 = True
    table_0 = module_0.Table(bool_0, bool_0, bool_0)
    assert (
        f"{type(table_0).__module__}.{type(table_0).__qualname__}"
        == "tinydb.table.Table"
    )
    assert module_0.Table.default_query_cache_capacity == 10
    assert (
        f"{type(module_0.Table.name).__module__}.{type(module_0.Table.name).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Table.storage).__module__}.{type(module_0.Table.storage).__qualname__}"
        == "builtins.property"
    )
    with pytest.raises(ValueError):
        table_0.upsert(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    set_0 = set()
    table_0 = module_0.Table(set_0, set_0)
    assert (
        f"{type(table_0).__module__}.{type(table_0).__qualname__}"
        == "tinydb.table.Table"
    )
    assert module_0.Table.default_query_cache_capacity == 10
    assert (
        f"{type(module_0.Table.name).__module__}.{type(module_0.Table.name).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Table.storage).__module__}.{type(module_0.Table.storage).__qualname__}"
        == "builtins.property"
    )
    table_0.update(set_0)


def test_case_12():
    set_0 = set()
    table_0 = module_0.Table(set_0, set_0)
    assert (
        f"{type(table_0).__module__}.{type(table_0).__qualname__}"
        == "tinydb.table.Table"
    )
    assert module_0.Table.default_query_cache_capacity == 10
    assert (
        f"{type(module_0.Table.name).__module__}.{type(module_0.Table.name).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Table.storage).__module__}.{type(module_0.Table.storage).__qualname__}"
        == "builtins.property"
    )
    with pytest.raises(RuntimeError):
        table_0.remove()


@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = True
    none_type_0 = None
    table_0 = module_0.Table(bool_0, none_type_0)
    assert (
        f"{type(table_0).__module__}.{type(table_0).__qualname__}"
        == "tinydb.table.Table"
    )
    assert module_0.Table.default_query_cache_capacity == 10
    assert (
        f"{type(module_0.Table.name).__module__}.{type(module_0.Table.name).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Table.storage).__module__}.{type(module_0.Table.storage).__qualname__}"
        == "builtins.property"
    )
    table_0.all()


@pytest.mark.xfail(strict=True)
def test_case_14():
    set_0 = set()
    table_0 = module_0.Table(set_0, set_0)
    assert (
        f"{type(table_0).__module__}.{type(table_0).__qualname__}"
        == "tinydb.table.Table"
    )
    assert module_0.Table.default_query_cache_capacity == 10
    assert (
        f"{type(module_0.Table.name).__module__}.{type(module_0.Table.name).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Table.storage).__module__}.{type(module_0.Table.storage).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    table_0.insert_multiple(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    int_0 = 126
    table_0 = module_0.Table(int_0, int_0)
    assert (
        f"{type(table_0).__module__}.{type(table_0).__qualname__}"
        == "tinydb.table.Table"
    )
    assert module_0.Table.default_query_cache_capacity == 10
    assert (
        f"{type(module_0.Table.name).__module__}.{type(module_0.Table.name).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Table.storage).__module__}.{type(module_0.Table.storage).__qualname__}"
        == "builtins.property"
    )
    table_0.truncate()


@pytest.mark.xfail(strict=True)
def test_case_16():
    set_0 = set()
    table_0 = module_0.Table(set_0, set_0)
    assert (
        f"{type(table_0).__module__}.{type(table_0).__qualname__}"
        == "tinydb.table.Table"
    )
    assert module_0.Table.default_query_cache_capacity == 10
    assert (
        f"{type(module_0.Table.name).__module__}.{type(module_0.Table.name).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Table.storage).__module__}.{type(module_0.Table.storage).__qualname__}"
        == "builtins.property"
    )
    table_0.remove(doc_ids=set_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    bool_0 = True
    none_type_0 = None
    table_0 = module_0.Table(bool_0, none_type_0)
    assert (
        f"{type(table_0).__module__}.{type(table_0).__qualname__}"
        == "tinydb.table.Table"
    )
    assert module_0.Table.default_query_cache_capacity == 10
    assert (
        f"{type(module_0.Table.name).__module__}.{type(module_0.Table.name).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Table.storage).__module__}.{type(module_0.Table.storage).__qualname__}"
        == "builtins.property"
    )
    none_type_1 = table_0.clear_cache()
    table_0.update_multiple(table_0)


def test_case_18():
    set_0 = set()
    none_type_0 = None
    table_0 = module_0.Table(none_type_0, none_type_0, set_0)
    assert (
        f"{type(table_0).__module__}.{type(table_0).__qualname__}"
        == "tinydb.table.Table"
    )
    assert module_0.Table.default_query_cache_capacity == 10
    assert (
        f"{type(module_0.Table.name).__module__}.{type(module_0.Table.name).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Table.storage).__module__}.{type(module_0.Table.storage).__qualname__}"
        == "builtins.property"
    )
    with pytest.raises(ValueError):
        table_0.insert(set_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    set_0 = set()
    table_0 = module_0.Table(set_0, set_0)
    assert (
        f"{type(table_0).__module__}.{type(table_0).__qualname__}"
        == "tinydb.table.Table"
    )
    assert module_0.Table.default_query_cache_capacity == 10
    assert (
        f"{type(module_0.Table.name).__module__}.{type(module_0.Table.name).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Table.storage).__module__}.{type(module_0.Table.storage).__qualname__}"
        == "builtins.property"
    )
    table_0.remove(table_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    l_r_u_cache_0 = module_1.LRUCache()
    table_0 = module_0.Table(l_r_u_cache_0, l_r_u_cache_0, persist_empty=l_r_u_cache_0)
    assert (
        f"{type(table_0).__module__}.{type(table_0).__qualname__}"
        == "tinydb.table.Table"
    )
    assert module_0.Table.default_query_cache_capacity == 10
    assert (
        f"{type(module_0.Table.name).__module__}.{type(module_0.Table.name).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Table.storage).__module__}.{type(module_0.Table.storage).__qualname__}"
        == "builtins.property"
    )
    table_0.insert(l_r_u_cache_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    set_0 = set()
    table_0 = module_0.Table(set_0, set_0)
    assert (
        f"{type(table_0).__module__}.{type(table_0).__qualname__}"
        == "tinydb.table.Table"
    )
    assert module_0.Table.default_query_cache_capacity == 10
    assert (
        f"{type(module_0.Table.name).__module__}.{type(module_0.Table.name).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Table.storage).__module__}.{type(module_0.Table.storage).__qualname__}"
        == "builtins.property"
    )
    iterator_0 = table_0.__iter__()
    table_0.contains(table_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    set_0 = set()
    table_0 = module_0.Table(set_0, set_0)
    assert (
        f"{type(table_0).__module__}.{type(table_0).__qualname__}"
        == "tinydb.table.Table"
    )
    assert module_0.Table.default_query_cache_capacity == 10
    assert (
        f"{type(module_0.Table.name).__module__}.{type(module_0.Table.name).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Table.storage).__module__}.{type(module_0.Table.storage).__qualname__}"
        == "builtins.property"
    )
    document_0 = module_0.Document(set_0, set_0)
    assert (
        f"{type(document_0).__module__}.{type(document_0).__qualname__}"
        == "tinydb.table.Document"
    )
    assert len(document_0) == 0
    l_r_u_cache_0 = module_1.LRUCache(document_0)
    table_0.insert(document_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    set_0 = set()
    document_0 = module_0.Document(set_0, set_0)
    assert (
        f"{type(document_0).__module__}.{type(document_0).__qualname__}"
        == "tinydb.table.Document"
    )
    assert len(document_0) == 0
    table_0 = module_0.Table(set_0, set_0)
    assert (
        f"{type(table_0).__module__}.{type(table_0).__qualname__}"
        == "tinydb.table.Table"
    )
    assert module_0.Table.default_query_cache_capacity == 10
    assert (
        f"{type(module_0.Table.name).__module__}.{type(module_0.Table.name).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.Table.storage).__module__}.{type(module_0.Table.storage).__qualname__}"
        == "builtins.property"
    )
    table_0.upsert(document_0)
