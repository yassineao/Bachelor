# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import tinydb.storages as module_0
import json as module_1
import json.decoder as module_2


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = "=1;n9fm=o0W\x0c`l;\x0cmy"
    module_0.touch(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    memory_storage_0 = module_0.MemoryStorage()
    assert (
        f"{type(memory_storage_0).__module__}.{type(memory_storage_0).__qualname__}"
        == "tinydb.storages.MemoryStorage"
    )
    assert memory_storage_0.memory is None
    str_0 = "YHsw<>Cpwpx\x0bH\tJ&"
    str_1 = "k"
    dict_0 = {str_0: memory_storage_0, str_1: str_1}
    module_0.JSONStorage(str_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = '\x0cr\rn t"\nzfr$'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    module_0.JSONStorage(str_0, str_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    list_0 = []
    str_0 = "9#u%[c"
    dict_0 = {str_0: str_0, str_0: list_0, str_0: list_0, str_0: list_0}
    none_type_0 = None
    module_0.JSONStorage(str_0, list_0, access_mode=none_type_0, **dict_0)


def test_case_4():
    memory_storage_0 = module_0.MemoryStorage()
    assert (
        f"{type(memory_storage_0).__module__}.{type(memory_storage_0).__qualname__}"
        == "tinydb.storages.MemoryStorage"
    )
    assert memory_storage_0.memory is None


@pytest.mark.xfail(strict=True)
def test_case_5():
    memory_storage_0 = module_0.MemoryStorage()
    assert (
        f"{type(memory_storage_0).__module__}.{type(memory_storage_0).__qualname__}"
        == "tinydb.storages.MemoryStorage"
    )
    assert memory_storage_0.memory is None
    none_type_0 = memory_storage_0.close()
    none_type_1 = None
    bool_0 = False
    module_0.touch(none_type_1, bool_0)


def test_case_6():
    str_0 = "DB"
    j_s_o_n_storage_0 = module_0.JSONStorage(str_0)
    assert (
        f"{type(j_s_o_n_storage_0).__module__}.{type(j_s_o_n_storage_0).__qualname__}"
        == "tinydb.storages.JSONStorage"
    )
    assert j_s_o_n_storage_0.kwargs == {}
    none_type_0 = j_s_o_n_storage_0.close()
    with pytest.raises(module_2.JSONDecodeError):
        module_1.loads(str_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = '\x0cr\rn t"\nzfr$'
    memory_storage_0 = module_0.MemoryStorage()
    assert (
        f"{type(memory_storage_0).__module__}.{type(memory_storage_0).__qualname__}"
        == "tinydb.storages.MemoryStorage"
    )
    assert memory_storage_0.memory is None
    dict_0 = {str_0: str_0}
    var_0 = memory_storage_0.write(memory_storage_0)
    assert (
        f"{type(memory_storage_0.memory).__module__}.{type(memory_storage_0.memory).__qualname__}"
        == "tinydb.storages.MemoryStorage"
    )
    var_1 = memory_storage_0.read()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "tinydb.storages.MemoryStorage"
    )
    assert (
        f"{type(var_1.memory).__module__}.{type(var_1.memory).__qualname__}"
        == "tinydb.storages.MemoryStorage"
    )
    module_0.JSONStorage(str_0, str_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = '\x0cr\rn t"\nzfr$'
    dict_0 = {str_0: str_0}
    module_0.JSONStorage(str_0, str_0, access_mode=str_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "DB"
    j_s_o_n_storage_0 = module_0.JSONStorage(str_0)
    assert (
        f"{type(j_s_o_n_storage_0).__module__}.{type(j_s_o_n_storage_0).__qualname__}"
        == "tinydb.storages.JSONStorage"
    )
    assert j_s_o_n_storage_0.kwargs == {}
    var_0 = j_s_o_n_storage_0.read()
    assert var_0 == "DB"
    none_type_0 = j_s_o_n_storage_0.close()
    dict_0 = {str_0: str_0, str_0: j_s_o_n_storage_0}
    module_0.JSONStorage(str_0, str_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "DB"
    j_s_o_n_storage_0 = module_0.JSONStorage(str_0)
    assert (
        f"{type(j_s_o_n_storage_0).__module__}.{type(j_s_o_n_storage_0).__qualname__}"
        == "tinydb.storages.JSONStorage"
    )
    assert j_s_o_n_storage_0.kwargs == {}
    var_0 = j_s_o_n_storage_0.read()
    assert var_0 == "DB"
    memory_storage_0 = module_0.MemoryStorage()
    assert (
        f"{type(memory_storage_0).__module__}.{type(memory_storage_0).__qualname__}"
        == "tinydb.storages.MemoryStorage"
    )
    assert memory_storage_0.memory is None
    none_type_0 = memory_storage_0.close()
    var_1 = j_s_o_n_storage_0.read()
    assert var_1 == "DB"
    var_2 = memory_storage_0.write(memory_storage_0)
    assert (
        f"{type(memory_storage_0.memory).__module__}.{type(memory_storage_0.memory).__qualname__}"
        == "tinydb.storages.MemoryStorage"
    )
    none_type_1 = j_s_o_n_storage_0.close()
    j_s_o_n_storage_0.read()


@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = "h/&E]4?>jS6GSgqG "
    memory_storage_0 = module_0.MemoryStorage()
    assert (
        f"{type(memory_storage_0).__module__}.{type(memory_storage_0).__qualname__}"
        == "tinydb.storages.MemoryStorage"
    )
    assert memory_storage_0.memory is None
    dict_0 = {}
    var_0 = memory_storage_0.read()
    var_1 = memory_storage_0.read()
    module_0.JSONStorage(str_0, str_0, **dict_0)
