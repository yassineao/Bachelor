# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import builtins as module_0
import tinydb.utils as module_1


def test_case_0():
    type_0 = module_0.float
    var_0 = module_1.with_typehint(type_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    type_0 = module_1.FrozenDict
    var_0 = module_1.LRUCache()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "tinydb.utils.LRUCache"
    )
    assert len(var_0) == 0
    assert (
        f"{type(module_1.LRUCache.lru).__module__}.{type(module_1.LRUCache.lru).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.LRUCache.length).__module__}.{type(module_1.LRUCache.length).__qualname__}"
        == "builtins.property"
    )
    var_1 = var_0.setdefault(type_0)
    assert len(var_0) == 1
    var_1.__iter__()


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = True
    int_0 = 1000
    dict_0 = {}
    var_0 = module_1.freeze(dict_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "tinydb.utils.FrozenDict"
    )
    var_1 = var_0.__eq__(int_0)
    var_1.__delitem__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "D\x0cuzg%J9[LsKSwU/'{?"
    var_0 = module_1.freeze(str_0)
    assert var_0 == "D\x0cuzg%J9[LsKSwU/'{?"
    var_1 = var_0.__hash__()
    assert var_1 == -7578261399769264217
    var_1.__len__()


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "g{FB\x0bm"
    list_0 = [str_0, str_0, str_0, str_0]
    var_0 = module_1.freeze(list_0)
    tuple_0 = (var_0, list_0)
    type_0 = module_0.float
    var_1 = module_1.with_typehint(type_0)
    var_1.__getitem__(tuple_0)


def test_case_5():
    frozen_dict_0 = module_1.FrozenDict()


def test_case_6():
    l_r_u_cache_0 = module_1.LRUCache()
    assert (
        f"{type(l_r_u_cache_0).__module__}.{type(l_r_u_cache_0).__qualname__}"
        == "tinydb.utils.LRUCache"
    )
    assert len(l_r_u_cache_0) == 0
    assert (
        f"{type(module_1.LRUCache.lru).__module__}.{type(module_1.LRUCache.lru).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.LRUCache.length).__module__}.{type(module_1.LRUCache.length).__qualname__}"
        == "builtins.property"
    )


def test_case_7():
    l_r_u_cache_0 = module_1.LRUCache()
    assert (
        f"{type(l_r_u_cache_0).__module__}.{type(l_r_u_cache_0).__qualname__}"
        == "tinydb.utils.LRUCache"
    )
    assert len(l_r_u_cache_0) == 0
    assert (
        f"{type(module_1.LRUCache.lru).__module__}.{type(module_1.LRUCache.lru).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.LRUCache.length).__module__}.{type(module_1.LRUCache.length).__qualname__}"
        == "builtins.property"
    )
    var_0 = l_r_u_cache_0.__len__()
    assert var_0 == 0


def test_case_8():
    type_0 = module_1.FrozenDict
    l_r_u_cache_0 = module_1.LRUCache()
    assert (
        f"{type(l_r_u_cache_0).__module__}.{type(l_r_u_cache_0).__qualname__}"
        == "tinydb.utils.LRUCache"
    )
    assert len(l_r_u_cache_0) == 0
    assert (
        f"{type(module_1.LRUCache.lru).__module__}.{type(module_1.LRUCache.lru).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.LRUCache.length).__module__}.{type(module_1.LRUCache.length).__qualname__}"
        == "builtins.property"
    )
    var_0 = module_1.freeze(type_0)
    var_1 = l_r_u_cache_0.setdefault(type_0)
    assert len(l_r_u_cache_0) == 1
    var_2 = l_r_u_cache_0.__iter__()
    with pytest.raises(KeyError):
        l_r_u_cache_0.__getitem__(var_1)


@pytest.mark.xfail(strict=True)
def test_case_9():
    dict_0 = {}
    var_0 = module_1.freeze(dict_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "tinydb.utils.FrozenDict"
    )
    var_1 = var_0.__hash__()
    assert var_1 == 5740354900026072187
    var_1.pop(var_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    var_0 = module_1.freeze(bool_0)
    assert var_0 is False
    frozen_dict_0 = module_1.FrozenDict()
    frozen_dict_0._immutable()


def test_case_11():
    str_0 = "s%:p/,4V;-;8S"
    dict_0 = {str_0: str_0}
    frozen_dict_0 = module_1.FrozenDict(**dict_0)
    with pytest.raises(TypeError):
        frozen_dict_0.update()


def test_case_12():
    frozen_dict_0 = module_1.FrozenDict()
    int_0 = frozen_dict_0.__len__()
    with pytest.raises(TypeError):
        frozen_dict_0.pop(int_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    complex_0 = -69.873872 + 1345.59219j
    bool_0 = False
    dict_0 = {complex_0: bool_0}
    var_0 = module_1.freeze(dict_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "tinydb.utils.FrozenDict"
    )
    assert len(var_0) == 1
    var_1 = var_0.__hash__()
    assert var_1 == 5262303181423063881
    var_1.pop(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    type_0 = module_1.FrozenDict
    l_r_u_cache_0 = module_1.LRUCache()
    assert (
        f"{type(l_r_u_cache_0).__module__}.{type(l_r_u_cache_0).__qualname__}"
        == "tinydb.utils.LRUCache"
    )
    assert len(l_r_u_cache_0) == 0
    assert (
        f"{type(module_1.LRUCache.lru).__module__}.{type(module_1.LRUCache.lru).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.LRUCache.length).__module__}.{type(module_1.LRUCache.length).__qualname__}"
        == "builtins.property"
    )
    var_0 = module_1.freeze(type_0)
    var_1 = l_r_u_cache_0.setdefault(type_0)
    assert len(l_r_u_cache_0) == 1
    var_2 = var_1.__hash__()
    var_3 = module_1.with_typehint(var_2)
    var_4 = l_r_u_cache_0.clear()
    assert len(l_r_u_cache_0) == 0
    var_3.__eq__(type_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    bool_0 = False
    var_0 = module_1.LRUCache()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "tinydb.utils.LRUCache"
    )
    assert len(var_0) == 0
    assert (
        f"{type(module_1.LRUCache.lru).__module__}.{type(module_1.LRUCache.lru).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.LRUCache.length).__module__}.{type(module_1.LRUCache.length).__qualname__}"
        == "builtins.property"
    )
    var_0.__delitem__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_16():
    set_0 = set()
    var_0 = module_1.freeze(set_0)
    var_0.__setitem__(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    str_0 = "DJ%\rInA|^t0"
    l_r_u_cache_0 = module_1.LRUCache()
    assert (
        f"{type(l_r_u_cache_0).__module__}.{type(l_r_u_cache_0).__qualname__}"
        == "tinydb.utils.LRUCache"
    )
    assert len(l_r_u_cache_0) == 0
    assert (
        f"{type(module_1.LRUCache.lru).__module__}.{type(module_1.LRUCache.lru).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.LRUCache.length).__module__}.{type(module_1.LRUCache.length).__qualname__}"
        == "builtins.property"
    )
    var_0 = l_r_u_cache_0.__iter__()
    var_1 = module_1.freeze(str_0)
    assert var_1 == "DJ%\rInA|^t0"
    none_type_0 = None
    l_r_u_cache_1 = module_1.LRUCache()
    assert len(l_r_u_cache_1) == 0
    bool_0 = l_r_u_cache_1.__contains__(none_type_0)
    assert bool_0 is False
    frozen_dict_0 = module_1.FrozenDict()
    var_2 = l_r_u_cache_1.set(str_0, none_type_0)
    assert len(l_r_u_cache_1) == 1
    var_3 = l_r_u_cache_0.update()
    var_1.update(var_2)


@pytest.mark.xfail(strict=True)
def test_case_18():
    type_0 = module_1.FrozenDict
    l_r_u_cache_0 = module_1.LRUCache(type_0)
    assert (
        f"{type(l_r_u_cache_0).__module__}.{type(l_r_u_cache_0).__qualname__}"
        == "tinydb.utils.LRUCache"
    )
    assert len(l_r_u_cache_0) == 0
    assert (
        f"{type(module_1.LRUCache.lru).__module__}.{type(module_1.LRUCache.lru).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.LRUCache.length).__module__}.{type(module_1.LRUCache.length).__qualname__}"
        == "builtins.property"
    )
    var_0 = l_r_u_cache_0.update()
    none_type_0 = None
    var_1 = module_1.freeze(none_type_0)
    var_2 = l_r_u_cache_0.__eq__(type_0)
    l_r_u_cache_0.setdefault(type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    type_0 = module_1.FrozenDict
    l_r_u_cache_0 = module_1.LRUCache()
    assert (
        f"{type(l_r_u_cache_0).__module__}.{type(l_r_u_cache_0).__qualname__}"
        == "tinydb.utils.LRUCache"
    )
    assert len(l_r_u_cache_0) == 0
    assert (
        f"{type(module_1.LRUCache.lru).__module__}.{type(module_1.LRUCache.lru).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.LRUCache.length).__module__}.{type(module_1.LRUCache.length).__qualname__}"
        == "builtins.property"
    )
    var_0 = l_r_u_cache_0.__setitem__(type_0, l_r_u_cache_0)
    assert len(l_r_u_cache_0) == 1
    var_1 = l_r_u_cache_0.setdefault(type_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "tinydb.utils.LRUCache"
    )
    assert len(var_1) == 1
    var_1.__hash__()


@pytest.mark.xfail(strict=True)
def test_case_20():
    type_0 = module_1.FrozenDict
    l_r_u_cache_0 = module_1.LRUCache()
    assert (
        f"{type(l_r_u_cache_0).__module__}.{type(l_r_u_cache_0).__qualname__}"
        == "tinydb.utils.LRUCache"
    )
    assert len(l_r_u_cache_0) == 0
    assert (
        f"{type(module_1.LRUCache.lru).__module__}.{type(module_1.LRUCache.lru).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.LRUCache.length).__module__}.{type(module_1.LRUCache.length).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    var_0 = l_r_u_cache_0.set(none_type_0, l_r_u_cache_0)
    assert len(l_r_u_cache_0) == 1
    var_1 = module_1.freeze(type_0)
    var_2 = l_r_u_cache_0.update(l_r_u_cache_0)
    var_3 = l_r_u_cache_0.setdefault(type_0)
    assert len(l_r_u_cache_0) == 2
    var_4 = var_3.__hash__()
    type_1 = module_0.int
    var_5 = module_1.with_typehint(type_1)
    var_2.clear()


@pytest.mark.xfail(strict=True)
def test_case_21():
    bool_0 = True
    l_r_u_cache_0 = module_1.LRUCache(bool_0)
    assert (
        f"{type(l_r_u_cache_0).__module__}.{type(l_r_u_cache_0).__qualname__}"
        == "tinydb.utils.LRUCache"
    )
    assert len(l_r_u_cache_0) == 0
    assert (
        f"{type(module_1.LRUCache.lru).__module__}.{type(module_1.LRUCache.lru).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_1.LRUCache.length).__module__}.{type(module_1.LRUCache.length).__qualname__}"
        == "builtins.property"
    )
    int_0 = 811
    bool_1 = l_r_u_cache_0.__contains__(int_0)
    assert bool_1 is False
    l_r_u_cache_1 = module_1.LRUCache()
    assert len(l_r_u_cache_1) == 0
    none_type_0 = None
    none_type_1 = l_r_u_cache_0.__setitem__(int_0, none_type_0)
    assert len(l_r_u_cache_0) == 1
    var_0 = l_r_u_cache_1.setdefault(int_0)
    assert len(l_r_u_cache_1) == 1
    iterator_0 = l_r_u_cache_1.__iter__()
    none_type_2 = l_r_u_cache_0.__setitem__(var_0, bool_0)
    bool_2 = l_r_u_cache_0.__contains__(iterator_0)
    assert bool_2 is False
    module_1.FrozenDict(*none_type_2)
