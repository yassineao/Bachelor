# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import tinydb.queries as module_0
import re as module_1
import tinydb.utils as module_2
import enum as module_3
import builtins as module_4


def test_case_0():
    str_0 = 'd$&xo"@kE'
    query_0 = module_0.where(str_0)
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )


@pytest.mark.xfail(strict=True)
def test_case_1():
    query_0 = module_0.Query()
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    query_0.any(query_0)


def test_case_2():
    query_0 = module_0.Query()
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )


def test_case_3():
    str_0 = "\n        G\x0ct thb able name.\n        "
    query_0 = module_0.where(str_0)
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    query_instance_0 = query_0.exists()
    assert (
        f"{type(query_instance_0).__module__}.{type(query_instance_0).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    query_instance_1 = query_0.any(query_instance_0)
    bool_0 = query_instance_1.__call__(query_0)
    assert bool_0 is True


def test_case_4():
    query_0 = module_0.Query()
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    var_0 = query_0.__repr__()
    assert var_0 == "Query()"
    var_1 = query_0.__getitem__(query_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "tinydb.queries.Query"
    )


def test_case_5():
    bytes_0 = b"$"
    str_0 = "=="
    query_0 = module_0.where(str_0)
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    query_instance_0 = query_0.__gt__(bytes_0)
    assert (
        f"{type(query_instance_0).__module__}.{type(query_instance_0).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    bool_0 = query_instance_0.__call__(query_instance_0)
    assert bool_0 is False


@pytest.mark.xfail(strict=True)
def test_case_6():
    query_0 = module_0.Query()
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    none_type_0 = None
    query_0.test(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "g+4=G&?9<s(GE]QK8*B"
    query_0 = module_0.where(str_0)
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    query_instance_0 = query_0.one_of(str_0)
    assert (
        f"{type(query_instance_0).__module__}.{type(query_instance_0).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    query_instance_1 = query_0.__gt__(query_instance_0)
    assert (
        f"{type(query_instance_1).__module__}.{type(query_instance_1).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    module_1.findall(query_0, str_0)





@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "\n        G\x0ct thb able name.\n        "
    query_0 = module_0.where(str_0)
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    query_instance_0 = query_0.all(query_0)
    assert (
        f"{type(query_instance_0).__module__}.{type(query_instance_0).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    bool_0 = query_instance_0.__call__(query_instance_0)
    assert bool_0 is False
    query_1 = query_0.map(bool_0)
    assert (
        f"{type(query_1).__module__}.{type(query_1).__qualname__}"
        == "tinydb.queries.Query"
    )
    query_instance_1 = query_0.__and__(query_0)
    query_instance_0.__call__(query_1)


@pytest.mark.xfail(strict=True)
def test_case_10():
    query_0 = module_0.Query()
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    int_0 = query_0.__hash__()
    assert int_0 == 5110737302149534639
    float_0 = -837.663408
    module_1.subn(float_0, float_0, float_0)


def test_case_11():
    str_0 = "\n        G\x0ct thb able name.\n        "
    query_0 = module_0.where(str_0)
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    var_0 = query_0.__eq__(str_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    query_instance_0 = query_0.any(var_0)
    bool_0 = query_instance_0.__call__(query_0)
    assert bool_0 is True


@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = "\n        G\x0ct thb able name.\n        "
    query_0 = module_0.where(str_0)
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    query_instance_0 = query_0.__le__(query_0)
    assert (
        f"{type(query_instance_0).__module__}.{type(query_instance_0).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    query_instance_1 = query_0.matches(str_0)
    query_1 = query_0.map(query_instance_0)
    assert (
        f"{type(query_1).__module__}.{type(query_1).__qualname__}"
        == "tinydb.queries.Query"
    )
    bool_0 = query_instance_1.__call__(query_1)
    assert bool_0 is False
    query_instance_2 = query_0.all(str_0)
    query_instance_3 = query_instance_2.__or__(query_1)
    query_instance_4 = query_1.__invert__()
    bool_0.__setattr__(query_instance_0, query_instance_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_13():
    query_0 = module_0.Query()
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    var_0 = query_0.__or__(query_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    query_0.test(var_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    query_0 = module_0.Query()
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    none_type_0 = None
    query_0.__ne__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_15():
    str_0 = "\n        G\x0ct thb able name.\n        "
    query_0 = module_0.where(str_0)
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    query_instance_0 = query_0.__le__(query_0)
    assert (
        f"{type(query_instance_0).__module__}.{type(query_instance_0).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    var_0 = query_0.__getitem__(query_0)
    query_instance_1 = query_0.all(var_0)
    var_1 = var_0.__dir__()
    bool_0 = query_instance_1.__call__(var_1)
    assert bool_0 is False
    bool_1 = query_instance_0.__call__(query_instance_1)
    assert bool_1 is False
    query_instance_2 = query_0.any(var_1)
    query_1 = query_0.map(query_instance_2)
    assert (
        f"{type(query_1).__module__}.{type(query_1).__qualname__}"
        == "tinydb.queries.Query"
    )
    bool_2 = query_instance_2.__call__(query_1)
    assert bool_2 is True
    query_instance_3 = query_0.__and__(query_0)
    query_instance_4 = var_0.__lt__(query_instance_1)
    assert (
        f"{type(query_instance_4).__module__}.{type(query_instance_4).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    query_instance_5 = query_1.__invert__()
    var_2 = query_1.__getattr__(query_1)
    var_3 = var_0.__hash__()
    assert var_3 == 6148505957378377296
    query_instance_1.__call__(var_2)


@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = "\n        G\x0ct thb able name.\n        "
    query_0 = module_0.where(str_0)
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    query_instance_0 = query_0.__le__(query_0)
    assert (
        f"{type(query_instance_0).__module__}.{type(query_instance_0).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    var_0 = query_0.__getitem__(query_0)
    query_instance_1 = query_0.all(var_0)
    var_1 = query_0.__eq__(str_0)
    bool_0 = query_instance_1.__call__(var_1)
    assert bool_0 is False
    query_instance_2 = query_0.any(var_1)
    query_1 = query_0.map(query_instance_2)
    assert (
        f"{type(query_1).__module__}.{type(query_1).__qualname__}"
        == "tinydb.queries.Query"
    )
    bool_1 = query_instance_2.__call__(query_1)
    assert bool_1 is True
    query_instance_3 = query_0.__and__(query_0)
    query_instance_4 = query_instance_3.__or__(query_1)
    query_instance_5 = query_1.noop()
    var_2 = query_1.__getattr__(query_1)
    var_3 = var_0.__hash__()
    assert var_3 == 6148505957378377296
    query_instance_1.__call__(var_2)


@pytest.mark.xfail(strict=True)
def test_case_18():
    str_0 = "\x0c%Cl+fy^@ASdPM/\nEo*)"
    query_0 = module_0.where(str_0)
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    query_instance_0 = query_0.search(str_0, str_0)
    assert (
        f"{type(query_instance_0).__module__}.{type(query_instance_0).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    bool_0 = query_instance_0.__call__(query_0)
    assert bool_0 is False
    str_0.__and__(query_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = "\x0c%Cl+fy^@ASdPM/\nEo*)"
    query_0 = module_0.where(str_0)
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    query_instance_0 = query_0.__le__(query_0)
    assert (
        f"{type(query_instance_0).__module__}.{type(query_instance_0).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    query_instance_1 = query_0.search(str_0, str_0)
    bool_0 = query_instance_1.__call__(query_0)
    assert bool_0 is False
    str_0.__and__(query_0)


def test_case_20():
    query_0 = module_0.Query()
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    query_instance_0 = query_0.__or__(query_0)
    assert (
        f"{type(query_instance_0).__module__}.{type(query_instance_0).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    query_instance_1 = query_0.__or__(query_instance_0)
    var_0 = module_1.purge()
    query_instance_2 = query_0.fragment(var_0)
    assert (
        f"{type(query_instance_2).__module__}.{type(query_instance_2).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )


@pytest.mark.xfail(strict=True)
def test_case_21():
    str_0 = "\n        G\x0ct thb able name.\n        "
    query_0 = module_0.where(str_0)
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    bytes_0 = b"O\x13\xc9\xd85\xf4h\xb1h\xeb\x0c>\xe1\xb5\x9d\xce}c\x1eP"
    query_instance_0 = query_0.fragment(bytes_0)
    assert (
        f"{type(query_instance_0).__module__}.{type(query_instance_0).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    query_1 = query_0.map(bytes_0)
    assert (
        f"{type(query_1).__module__}.{type(query_1).__qualname__}"
        == "tinydb.queries.Query"
    )
    var_0 = query_1.__getattr__(query_1)
    var_1 = var_0.__eq__(var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    query_instance_0.__call__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_22():
    str_0 = "\n        G\x0ct thb able name.\n        "
    query_0 = module_0.where(str_0)
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    query_instance_0 = query_0.all(query_0)
    assert (
        f"{type(query_instance_0).__module__}.{type(query_instance_0).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    var_0 = query_0.__eq__(str_0)
    bool_0 = query_instance_0.__call__(var_0)
    assert bool_0 is False
    query_1 = query_0.map(var_0)
    assert (
        f"{type(query_1).__module__}.{type(query_1).__qualname__}"
        == "tinydb.queries.Query"
    )
    query_instance_1 = query_0.__and__(query_0)
    query_instance_2 = query_instance_1.__or__(query_1)
    var_1 = query_instance_0.__ne__(var_0)
    assert var_1 is True
    query_instance_0.__call__(query_1)


@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = "\n        G\x0ct thb able name.\n        "
    query_0 = module_0.where(str_0)
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    query_instance_0 = query_0.__le__(query_0)
    assert (
        f"{type(query_instance_0).__module__}.{type(query_instance_0).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    var_0 = query_0.__getitem__(query_0)
    query_instance_1 = query_0.all(var_0)
    bool_0 = query_instance_1.__call__(query_instance_0)
    assert bool_0 is False
    query_instance_2 = query_0.any(query_instance_0)
    bool_1 = query_instance_2.__call__(var_0)
    assert bool_1 is True
    query_instance_3 = query_0.__invert__()
    var_1 = var_0.__getattr__(var_0)
    var_2 = query_instance_1.__ne__(var_1)
    assert var_2 is True
    query_instance_1.__call__(var_1)



@pytest.mark.xfail(strict=True)
def test_case_25():
    query_0 = module_0.Query()
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    query_0.__ge__(query_0)



@pytest.mark.xfail(strict=True)
def test_case_27():
    str_0 = "\n        Get the table name.\n        "
    query_0 = module_0.where(str_0)
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    query_instance_0 = query_0.one_of(str_0)
    assert (
        f"{type(query_instance_0).__module__}.{type(query_instance_0).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    query_instance_1 = query_0.__gt__(query_instance_0)
    assert (
        f"{type(query_instance_1).__module__}.{type(query_instance_1).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    query_instance_2 = query_0.__and__(query_0)
    none_type_0 = None
    query_instance_3 = query_instance_1.__or__(query_instance_0)
    assert (
        f"{type(query_instance_3).__module__}.{type(query_instance_3).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    bool_0 = query_instance_3.__call__(query_instance_3)
    assert bool_0 is False
    var_0 = query_instance_2.__repr__()
    assert (
        var_0
        == "QueryImpl('and', frozenset({('path', ('\\n        Get the table name.\\n        ',))}))"
    )
    query_instance_4 = query_0.__invert__()
    query_instance_5 = query_instance_2.__or__(query_instance_4)
    var_1 = query_instance_5.__eq__(query_instance_1)
    assert var_1 is False
    query_instance_1.__or__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_28():
    str_0 = "\n        G\x0ct thb able name.\n        "
    query_0 = module_0.where(str_0)
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    query_instance_0 = query_0.any(str_0)
    assert (
        f"{type(query_instance_0).__module__}.{type(query_instance_0).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    query_instance_0.__call__(query_0)


@pytest.mark.xfail(strict=True)
def test_case_29():
    enum_dict_0 = module_3._EnumDict()
    query_0 = module_0.where(enum_dict_0)
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    query_instance_0 = query_0.noop()
    query_1 = module_0.where(query_instance_0)
    query_2 = module_0.Query()
    str_0 = "9#6q$Yab"
    query_instance_1 = query_1.__and__(query_1)
    query_instance_2 = query_1.all(str_0)
    assert (
        f"{type(query_instance_2).__module__}.{type(query_instance_2).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    var_0 = module_1.purge()
    none_type_0 = None
    bool_0 = query_instance_2.__call__(query_instance_2)
    assert bool_0 is False
    var_1 = query_instance_2.__hash__()
    assert var_1 == -7084888001483273738
    query_instance_3 = query_1.matches(query_1)
    query_instance_4 = query_1.__invert__()
    query_instance_5 = query_instance_1.__or__(query_instance_4)
    var_2 = query_instance_2.__eq__(var_1)
    assert var_2 is False
    var_2.__call__(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_30():
    str_0 = "\n        G\x0ct thb able name.\n        "
    query_0 = module_0.where(str_0)
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    query_instance_0 = query_0.exists()
    assert (
        f"{type(query_instance_0).__module__}.{type(query_instance_0).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    int_0 = query_0.__hash__()
    assert int_0 == -2116701660202370513
    query_instance_1 = query_0.__gt__(str_0)
    assert (
        f"{type(query_instance_1).__module__}.{type(query_instance_1).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    query_instance_2 = query_0.search(str_0, str_0)
    bytes_0 = b"\xa7-\xf9\x94\xc2\x89"
    query_instance_3 = query_0.any(int_0)
    query_instance_4 = query_0.one_of(query_0)
    query_instance_5 = query_0.any(query_instance_4)
    query_instance_6 = query_instance_3.__invert__()
    query_instance_7 = query_0.matches(query_instance_2, query_instance_4)
    query_1 = query_0.map(query_instance_7)
    assert (
        f"{type(query_1).__module__}.{type(query_1).__qualname__}"
        == "tinydb.queries.Query"
    )
    bool_0 = query_instance_2.__call__(query_0)
    assert bool_0 is False
    bool_1 = query_instance_7.__call__(query_1)
    assert bool_1 is False
    query_instance_8 = query_0.__and__(query_0)
    query_instance_9 = query_instance_8.__or__(query_1)
    var_0 = module_2.freeze(query_instance_8)
    var_1 = query_1.__getattr__(query_1)
    query_instance_10 = query_1.fragment(bool_1)
    bool_2 = query_instance_6.__call__(query_instance_6)
    assert bool_2 is True
    enum_dict_0 = module_3._EnumDict()
    var_2 = bytes_0.__eq__(enum_dict_0)
    query_instance_3.__call__(var_1)


@pytest.mark.xfail(strict=True)
def test_case_31():
    str_0 = "\n        G\x0ct thb able name.\n        "
    query_0 = module_0.where(str_0)
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    query_instance_0 = query_0.all(query_0)
    assert (
        f"{type(query_instance_0).__module__}.{type(query_instance_0).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    var_0 = query_0.__eq__(str_0)
    bool_0 = query_instance_0.__call__(var_0)
    assert bool_0 is False
    query_instance_1 = query_0.any(var_0)
    query_1 = query_0.map(query_instance_1)
    assert (
        f"{type(query_1).__module__}.{type(query_1).__qualname__}"
        == "tinydb.queries.Query"
    )
    query_instance_2 = query_0.__and__(query_0)
    query_instance_3 = query_instance_2.__or__(query_1)
    query_instance_4 = query_1.__invert__()
    var_1 = query_1.__getattr__(query_1)
    var_2 = var_1.__ne__(var_1)
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    query_instance_0.__call__(var_1)


@pytest.mark.xfail(strict=True)
def test_case_32():
    str_0 = "\n        G\x0ct thb able name.\n        "
    query_0 = module_0.where(str_0)
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    query_instance_0 = query_0.__le__(query_0)
    assert (
        f"{type(query_instance_0).__module__}.{type(query_instance_0).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    var_0 = query_0.__getitem__(query_0)
    query_instance_1 = query_0.all(var_0)
    var_1 = query_0.__eq__(str_0)
    bool_0 = query_instance_1.__call__(var_1)
    assert bool_0 is False
    query_instance_2 = query_0.any(var_1)
    query_1 = query_0.map(query_instance_2)
    assert (
        f"{type(query_1).__module__}.{type(query_1).__qualname__}"
        == "tinydb.queries.Query"
    )
    bool_1 = query_instance_2.__call__(query_1)
    assert bool_1 is True
    query_instance_3 = query_1.__or__(query_1)
    query_instance_4 = query_instance_1.__or__(query_1)
    query_instance_5 = query_1.__invert__()
    var_2 = var_0.__hash__()
    assert var_2 == 6148505957378377296
    query_instance_1.__call__(query_0)


@pytest.mark.xfail(strict=True)
def test_case_33():
    str_0 = "\n        G\x0ct thb able name.\n        "
    query_0 = module_0.where(str_0)
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    var_0 = query_0.__getitem__(query_0)
    query_instance_0 = query_0.all(var_0)
    assert (
        f"{type(query_instance_0).__module__}.{type(query_instance_0).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    var_1 = query_0.__eq__(str_0)
    query_instance_1 = query_0.any(var_1)
    query_1 = query_0.map(query_instance_1)
    assert (
        f"{type(query_1).__module__}.{type(query_1).__qualname__}"
        == "tinydb.queries.Query"
    )
    bool_0 = query_instance_1.__call__(query_1)
    assert bool_0 is True
    query_instance_2 = query_0.__and__(query_0)
    query_instance_3 = query_instance_2.__or__(query_1)
    query_instance_4 = query_1.__invert__()
    var_2 = query_1.__getattr__(query_1)
    query_instance_5 = var_1.__and__(query_instance_3)
    query_instance_0.__call__(var_2)


@pytest.mark.xfail(strict=True)
def test_case_34():
    str_0 = "y0c}V"
    query_0 = module_0.where(str_0)
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    query_instance_0 = query_0.__le__(query_0)
    assert (
        f"{type(query_instance_0).__module__}.{type(query_instance_0).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    none_type_0 = None
    query_instance_1 = query_instance_0.__le__(none_type_0)
    query_instance_2 = query_0.__ge__(str_0)
    assert (
        f"{type(query_instance_2).__module__}.{type(query_instance_2).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    query_instance_3 = query_0.any(query_instance_2)
    query_1 = query_0.map(query_instance_3)
    assert (
        f"{type(query_1).__module__}.{type(query_1).__qualname__}"
        == "tinydb.queries.Query"
    )
    bool_0 = query_instance_3.__call__(query_1)
    assert bool_0 is True
    query_instance_4 = query_0.__and__(query_0)
    query_instance_5 = query_0.all(str_0)
    query_2 = query_1.map(query_1)
    query_instance_6 = query_1.__invert__()
    var_0 = query_1.__getattr__(query_1)
    bool_1 = query_instance_5.__call__(query_instance_5)
    assert bool_1 is False
    var_1 = query_instance_5.__hash__()
    assert var_1 == -1545551344460579260
    object_0 = module_4.object()
    query_3 = module_0.Query()
    query_3.test(var_1)


@pytest.mark.xfail(strict=True)
def test_case_35():
    str_0 = "\n        G\x0ct thb able name.\n        "
    query_0 = module_0.where(str_0)
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    var_0 = query_0.__getitem__(query_0)
    query_instance_0 = query_0.all(var_0)
    assert (
        f"{type(query_instance_0).__module__}.{type(query_instance_0).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    var_1 = query_0.__eq__(str_0)
    bool_0 = query_instance_0.__call__(var_1)
    assert bool_0 is False
    query_instance_1 = query_0.any(var_1)
    query_1 = query_0.map(query_instance_1)
    assert (
        f"{type(query_1).__module__}.{type(query_1).__qualname__}"
        == "tinydb.queries.Query"
    )
    query_instance_2 = query_1.__and__(query_instance_0)
    bool_1 = query_instance_1.__call__(query_1)
    assert bool_1 is True
    query_instance_3 = query_0.__and__(query_0)
    query_instance_4 = query_1.__invert__()
    var_2 = query_1.__getattr__(query_1)
    query_instance_5 = var_1.__and__(query_instance_4)
    query_instance_0.__call__(var_2)


@pytest.mark.xfail(strict=True)
def test_case_36():
    str_0 = "\n        Get the able name.\n        "
    query_0 = module_0.where(str_0)
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    query_instance_0 = query_0.__le__(query_0)
    assert (
        f"{type(query_instance_0).__module__}.{type(query_instance_0).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    bytes_0 = b"<\\\x1f\xd5BU\xbb\x9d\xaf\xa4\xb1\x97\xe2"
    query_instance_1 = query_0.fragment(bytes_0)
    query_instance_2 = query_0.__gt__(query_instance_1)
    assert (
        f"{type(query_instance_2).__module__}.{type(query_instance_2).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    str_1 = "9#6q$Yab"
    query_instance_3 = query_0.any(query_instance_2)
    query_1 = query_0.map(query_instance_3)
    assert (
        f"{type(query_1).__module__}.{type(query_1).__qualname__}"
        == "tinydb.queries.Query"
    )
    bool_0 = query_instance_3.__call__(query_1)
    assert bool_0 is True
    query_instance_4 = query_0.__and__(query_0)
    query_instance_5 = query_0.all(str_1)
    query_instance_6 = query_instance_4.__or__(query_1)
    query_instance_7 = query_1.__invert__()
    var_0 = query_1.__getattr__(query_1)
    bool_1 = query_instance_5.__call__(query_instance_5)
    assert bool_1 is False
    var_1 = query_instance_5.__hash__()
    assert var_1 == -6883805814326775759
    var_2 = query_instance_5.__eq__(var_1)
    assert var_2 is False
    query_2 = module_0.Query()
    module_1.template(query_instance_2)


@pytest.mark.xfail(strict=True)
def test_case_37():
    str_0 = "\n        Get the able name.\n        "
    query_0 = module_0.where(str_0)
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    query_instance_0 = query_0.__le__(query_0)
    assert (
        f"{type(query_instance_0).__module__}.{type(query_instance_0).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    bytes_0 = b""
    query_instance_1 = query_0.fragment(bytes_0)
    none_type_0 = None
    query_instance_2 = query_instance_0.__le__(none_type_0)
    query_instance_3 = query_0.__ge__(str_0)
    assert (
        f"{type(query_instance_3).__module__}.{type(query_instance_3).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    str_1 = "9#6q$Yab"
    query_instance_4 = query_0.__lt__(none_type_0)
    assert (
        f"{type(query_instance_4).__module__}.{type(query_instance_4).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    query_1 = query_0.map(query_instance_4)
    assert (
        f"{type(query_1).__module__}.{type(query_1).__qualname__}"
        == "tinydb.queries.Query"
    )
    bool_0 = query_instance_4.__call__(query_1)
    assert (
        f"{type(bool_0).__module__}.{type(bool_0).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    query_instance_5 = query_0.__and__(query_0)
    query_instance_6 = query_0.all(str_1)
    query_2 = query_1.map(query_instance_1)
    query_instance_7 = query_2.__and__(query_0)
    query_instance_8 = query_1.__invert__()
    var_0 = query_1.__getattr__(query_1)
    module_1.escape(query_instance_1)


@pytest.mark.xfail(strict=True)
def test_case_38():
    str_0 = "\n        G\x0ct thb able name.\n        "
    query_0 = module_0.where(str_0)
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    int_0 = query_0.__hash__()
    assert int_0 == -2116701660202370513
    query_instance_0 = query_0.any(int_0)
    assert (
        f"{type(query_instance_0).__module__}.{type(query_instance_0).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    query_instance_1 = query_0.one_of(query_0)
    query_instance_2 = query_0.any(query_instance_1)
    query_instance_3 = query_instance_0.__invert__()
    str_1 = "!;6q$Yab"
    query_instance_4 = query_0.matches(query_instance_1, query_instance_1)
    query_1 = query_0.map(query_instance_4)
    assert (
        f"{type(query_1).__module__}.{type(query_1).__qualname__}"
        == "tinydb.queries.Query"
    )
    bool_0 = query_instance_2.__call__(query_0)
    assert bool_0 is True
    bool_1 = query_instance_4.__call__(query_1)
    assert bool_1 is False
    query_instance_5 = query_0.all(str_1)
    query_instance_6 = query_instance_0.__or__(query_1)
    var_0 = module_2.freeze(str_0)
    var_1 = query_1.__getattr__(query_1)
    bool_2 = query_instance_5.__call__(query_instance_5)
    assert bool_2 is False
    var_2 = query_instance_5.__eq__(var_1)
    assert var_2 is False
    query_instance_0.__call__(var_1)


@pytest.mark.xfail(strict=True)
def test_case_39():
    str_0 = "\n        Get the table name.\n        "
    query_0 = module_0.where(str_0)
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    query_instance_0 = query_0.one_of(str_0)
    assert (
        f"{type(query_instance_0).__module__}.{type(query_instance_0).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    str_1 = "9#6q$Yab"
    query_instance_1 = query_0.noop()
    query_instance_2 = module_1.template(str_1)
    query_instance_3 = query_instance_1.__or__(query_instance_0)
    bool_0 = query_instance_3.__call__(query_instance_3)
    assert bool_0 is True
    var_0 = query_instance_2.__repr__()
    var_1 = query_instance_3.__repr__()
    assert (
        var_1
        == "QueryImpl('or', frozenset({(), ('one_of', ('\\n        Get the table name.\\n        ',), '\\n        Get the table name.\\n        ')}))"
    )
    query_instance_4 = query_0.matches(query_0)
    query_instance_5 = query_0.__invert__()
    query_instance_2.__or__(query_instance_5)


@pytest.mark.xfail(strict=True)
def test_case_40():
    str_0 = "\n        G\x0ct thb able name.\n        "
    query_0 = module_0.where(str_0)
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    query_instance_0 = module_1.purge()
    query_instance_1 = query_0.search(str_0, str_0)
    assert (
        f"{type(query_instance_1).__module__}.{type(query_instance_1).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    query_instance_2 = module_0.where(str_0)
    var_0 = query_0.__eq__(str_0)
    str_1 = "9#6q$Yab"
    query_instance_3 = query_0.test(var_0, *str_1)
    query_1 = query_0.map(query_instance_3)
    assert (
        f"{type(query_1).__module__}.{type(query_1).__qualname__}"
        == "tinydb.queries.Query"
    )
    query_instance_3.__call__(query_1)


@pytest.mark.xfail(strict=True)
def test_case_41():
    str_0 = "\n        G\x0ct thb able name.\n        "
    query_0 = module_0.where(str_0)
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    query_instance_0 = query_0.__le__(query_0)
    assert (
        f"{type(query_instance_0).__module__}.{type(query_instance_0).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    query_instance_1 = query_0.search(str_0, str_0)
    bytes_0 = b"O\x13\xc9\xd8\x1c\xf4h8h\xeb\x0c>\xe1\xb5\x9d\xce}c\x1eP"
    query_instance_2 = query_instance_1.__and__(query_instance_0)
    assert (
        f"{type(query_instance_2).__module__}.{type(query_instance_2).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    var_0 = query_0.__ne__(bytes_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    str_1 = "9#6q$Yab"
    query_instance_3 = query_0.any(var_0)
    query_1 = query_0.map(query_instance_3)
    assert (
        f"{type(query_1).__module__}.{type(query_1).__qualname__}"
        == "tinydb.queries.Query"
    )
    bool_0 = query_instance_3.__call__(query_1)
    assert bool_0 is True
    query_instance_4 = query_0.__and__(query_0)
    var_1 = query_instance_3.__repr__()
    assert (
        var_1
        == "QueryImpl('any', ('\\n        G\\x0ct thb able name.\\n        ',), QueryImpl('!=', ('\\n        G\\x0ct thb able name.\\n        ',), b'O\\x13\\xc9\\xd8\\x1c\\xf4h8h\\xeb\\x0c>\\xe1\\xb5\\x9d\\xce}c\\x1eP'))"
    )
    query_instance_5 = query_0.all(str_1)
    bool_1 = query_instance_5.__call__(query_instance_5)
    assert bool_1 is False
    var_2 = query_instance_5.__hash__()
    assert var_2 == -8131025276941462311
    var_3 = query_instance_5.__eq__(var_2)
    assert var_3 is False
    bool_2 = query_instance_2.__call__(query_1)
    assert bool_2 is False
    query_2 = module_0.Query()
    query_instance_6 = query_instance_2.__and__(query_instance_0)
    module_1.compile(var_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_42():
    str_0 = "\n        G\x0ct thb able name.\n        "
    query_0 = module_0.where(str_0)
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    query_instance_0 = query_0.__le__(query_0)
    assert (
        f"{type(query_instance_0).__module__}.{type(query_instance_0).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    query_instance_1 = query_0.search(str_0, str_0)
    query_instance_2 = query_0.one_of(query_0)
    str_1 = "9#6q$Yab"
    query_instance_3 = query_0.any(query_instance_2)
    query_1 = query_0.map(query_instance_3)
    assert (
        f"{type(query_1).__module__}.{type(query_1).__qualname__}"
        == "tinydb.queries.Query"
    )
    bool_0 = query_instance_3.__call__(query_1)
    assert bool_0 is True
    query_instance_4 = query_0.__and__(query_0)
    query_instance_5 = query_0.all(str_1)
    var_0 = query_1.__getattr__(query_1)
    bool_1 = query_instance_5.__call__(query_instance_5)
    assert bool_1 is False
    var_1 = query_instance_5.__hash__()
    assert var_1 == -8131025276941462311
    var_2 = query_instance_5.__eq__(var_1)
    assert var_2 is False
    bool_2 = query_instance_5.__call__(var_0)
    assert bool_2 is True
    query_2 = module_0.Query()
    module_1.compile(query_instance_2, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_43():
    str_0 = "\n        G\x0ct thb able name.\n        "
    query_0 = module_0.where(str_0)
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    query_instance_0 = query_0.__le__(query_0)
    assert (
        f"{type(query_instance_0).__module__}.{type(query_instance_0).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    bytes_0 = b"O\x13\xc9\xd8\x1c\xf4h8h\xeb\x0c>\xe1\xb5\x9d\xce}c\x1eP"
    query_instance_1 = query_0.fragment(bytes_0)
    query_instance_2 = query_instance_0.__and__(query_instance_1)
    assert (
        f"{type(query_instance_2).__module__}.{type(query_instance_2).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    query_instance_3 = query_0.any(query_instance_2)
    query_instance_3.__call__(query_0)


@pytest.mark.xfail(strict=True)
def test_case_44():
    str_0 = "\n        G\x0ct thb able name.\n        "
    query_0 = module_0.where(str_0)
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    query_instance_0 = query_0.__le__(query_0)
    assert (
        f"{type(query_instance_0).__module__}.{type(query_instance_0).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    query_instance_1 = query_0.search(str_0, str_0)
    bytes_0 = b""
    query_instance_2 = query_0.fragment(bytes_0)
    var_0 = query_0.__eq__(str_0)
    str_1 = "9#6q$Yab"
    query_instance_3 = query_0.any(var_0)
    query_1 = query_0.map(query_instance_3)
    assert (
        f"{type(query_1).__module__}.{type(query_1).__qualname__}"
        == "tinydb.queries.Query"
    )
    bool_0 = query_instance_3.__call__(query_1)
    assert bool_0 is True
    query_instance_4 = query_0.__and__(query_0)
    query_instance_5 = query_0.all(str_1)
    query_instance_6 = query_instance_4.__or__(query_1)
    bool_1 = query_instance_5.__call__(query_instance_5)
    assert bool_1 is False
    var_1 = query_instance_5.__hash__()
    assert var_1 == -8131025276941462311
    var_2 = query_instance_5.__eq__(var_1)
    assert var_2 is False
    bool_2 = query_instance_2.__call__(query_1)
    assert bool_2 is True
    query_2 = module_0.Query()
    module_1.compile(var_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_45():
    str_0 = "\n        G\x0ct thb able name.\n        "
    query_0 = module_0.where(str_0)
    assert (
        f"{type(query_0).__module__}.{type(query_0).__qualname__}"
        == "tinydb.queries.Query"
    )
    query_instance_0 = query_0.__le__(query_0)
    assert (
        f"{type(query_instance_0).__module__}.{type(query_instance_0).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    query_instance_1 = query_0.search(str_0, str_0)
    query_instance_2 = query_0.one_of(query_0)
    query_instance_3 = query_0.any(query_instance_2)
    query_1 = query_0.map(query_instance_3)
    assert (
        f"{type(query_1).__module__}.{type(query_1).__qualname__}"
        == "tinydb.queries.Query"
    )
    bool_0 = query_instance_3.__call__(query_1)
    assert bool_0 is True
    query_instance_4 = query_0.__and__(query_0)
    query_instance_5 = query_instance_4.__or__(query_1)
    query_instance_6 = query_1.__invert__()
    var_0 = query_1.__getattr__(query_1)
    bool_1 = query_instance_2.__call__(query_instance_2)
    assert bool_1 is False
    query_instance_7 = var_0.__lt__(query_instance_2)
    assert (
        f"{type(query_instance_7).__module__}.{type(query_instance_7).__qualname__}"
        == "tinydb.queries.QueryInstance"
    )
    var_1 = query_instance_2.__eq__(query_instance_7)
    assert var_1 is False
    query_instance_7.__call__(var_0)
