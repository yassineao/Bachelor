# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import tinydb.database as module_0
import tinydb.utils as module_1
import tinydb.table as module_2


@pytest.mark.xfail(strict=True)
def test_case_0():
    module_0.TinyDB()


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "]asGzjK4^~Vx"
    list_0 = [str_0]
    str_1 = "$hoXH-2#"
    dict_0 = {str_0: str_0, str_1: list_0}
    tiny_d_b_0 = module_0.TinyDB(*list_0, **dict_0)
    assert len(tiny_d_b_0) == 0
    assert module_0.TinyDB.default_table_name == "_default"
    assert (
        f"{type(module_0.TinyDB.storage).__module__}.{type(module_0.TinyDB.storage).__qualname__}"
        == "builtins.property"
    )
    tiny_d_b_0.drop_tables()


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "]asGzjK4^~Vx"
    list_0 = [str_0]
    dict_0 = {str_0: str_0, str_0: list_0}
    tiny_d_b_0 = module_0.TinyDB(*list_0, **dict_0)
    assert len(tiny_d_b_0) == 0
    assert module_0.TinyDB.default_table_name == "_default"
    assert (
        f"{type(module_0.TinyDB.storage).__module__}.{type(module_0.TinyDB.storage).__qualname__}"
        == "builtins.property"
    )
    var_0 = tiny_d_b_0.__enter__()
    assert len(var_0) == 0
    var_1 = tiny_d_b_0.__repr__()
    assert (
        var_1
        == "<TinyDB tables=[], tables_count=0, default_table_documents_count=0, all_tables_documents_count=[]>"
    )
    var_2 = var_0.__len__()
    var_3 = var_1.__repr__()
    assert (
        var_3
        == "'<TinyDB tables=[], tables_count=0, default_table_documents_count=0, all_tables_documents_count=[]>'"
    )
    module_0.TinyDB(*var_2, **var_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "]asGzjK4^~Vx"
    list_0 = [str_0]
    dict_0 = {str_0: str_0, str_0: list_0}
    tiny_d_b_0 = module_0.TinyDB(*list_0, **dict_0)
    assert len(tiny_d_b_0) == 0
    assert module_0.TinyDB.default_table_name == "_default"
    assert (
        f"{type(module_0.TinyDB.storage).__module__}.{type(module_0.TinyDB.storage).__qualname__}"
        == "builtins.property"
    )
    var_0 = tiny_d_b_0.__len__()
    assert var_0 == 0
    var_1 = var_0.__repr__()
    tiny_d_b_1 = var_1.__repr__()
    none_type_0 = tiny_d_b_0.close()
    var_0.__enter__()


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "]asGzjK4^~Vx"
    list_0 = [str_0]
    dict_0 = {str_0: str_0, str_0: list_0}
    tiny_d_b_0 = module_0.TinyDB(*list_0, **dict_0)
    assert len(tiny_d_b_0) == 0
    assert module_0.TinyDB.default_table_name == "_default"
    assert (
        f"{type(module_0.TinyDB.storage).__module__}.{type(module_0.TinyDB.storage).__qualname__}"
        == "builtins.property"
    )
    var_0 = tiny_d_b_0.__enter__()
    assert len(var_0) == 0
    var_1 = tiny_d_b_0.__repr__()
    assert (
        var_1
        == "<TinyDB tables=[], tables_count=0, default_table_documents_count=0, all_tables_documents_count=[]>"
    )
    var_2 = var_0.__len__()
    var_3 = tiny_d_b_0.__repr__()
    assert (
        var_3
        == "<TinyDB tables=[], tables_count=0, default_table_documents_count=0, all_tables_documents_count=[]>"
    )
    var_4 = var_3.__repr__()
    assert (
        var_4
        == "'<TinyDB tables=[], tables_count=0, default_table_documents_count=0, all_tables_documents_count=[]>'"
    )
    iterator_0 = var_0.__iter__()
    var_5 = tiny_d_b_0.__repr__()
    assert (
        var_5
        == "<TinyDB tables=[], tables_count=0, default_table_documents_count=0, all_tables_documents_count=[]>"
    )
    module_0.TinyDB()


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "]asGzjK4^~Vx"
    list_0 = [str_0]
    dict_0 = {str_0: list_0}
    tiny_d_b_0 = module_0.TinyDB(*list_0, **dict_0)
    assert len(tiny_d_b_0) == 0
    assert module_0.TinyDB.default_table_name == "_default"
    assert (
        f"{type(module_0.TinyDB.storage).__module__}.{type(module_0.TinyDB.storage).__qualname__}"
        == "builtins.property"
    )
    var_0 = tiny_d_b_0.__repr__()
    assert (
        var_0
        == "<TinyDB tables=[], tables_count=0, default_table_documents_count=0, all_tables_documents_count=[]>"
    )
    var_1 = tiny_d_b_0.__exit__()
    tiny_d_b_0.__getattr__(var_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "]asGzjK4^~Vx"
    list_0 = [str_0]
    dict_0 = {}
    tiny_d_b_0 = module_0.TinyDB(*list_0, **dict_0)
    assert len(tiny_d_b_0) == 0
    assert module_0.TinyDB.default_table_name == "_default"
    assert (
        f"{type(module_0.TinyDB.storage).__module__}.{type(module_0.TinyDB.storage).__qualname__}"
        == "builtins.property"
    )
    var_0 = tiny_d_b_0.__len__()
    assert var_0 == 0
    var_1 = tiny_d_b_0.__repr__()
    assert (
        var_1
        == "<TinyDB tables=[], tables_count=0, default_table_documents_count=0, all_tables_documents_count=[]>"
    )
    none_type_0 = tiny_d_b_0.drop_table(str_0)
    var_2 = var_1.__repr__()
    assert (
        var_2
        == "'<TinyDB tables=[], tables_count=0, default_table_documents_count=0, all_tables_documents_count=[]>'"
    )
    tiny_d_b_1 = module_1.with_typehint(var_2)
    tiny_d_b_1.__repr__()


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "]asGzjK4^~Vx"
    list_0 = [str_0]
    dict_0 = {}
    tiny_d_b_0 = module_0.TinyDB(*list_0, **dict_0)
    assert len(tiny_d_b_0) == 0
    assert module_0.TinyDB.default_table_name == "_default"
    assert (
        f"{type(module_0.TinyDB.storage).__module__}.{type(module_0.TinyDB.storage).__qualname__}"
        == "builtins.property"
    )
    var_0 = tiny_d_b_0.__exit__()
    var_1 = tiny_d_b_0.__exit__()
    var_2 = module_2.Table(var_1, var_0)
    module_0.TinyDB(*var_1)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "]azjK4^~Vx"
    list_0 = [str_0]
    dict_0 = {}
    tiny_d_b_0 = module_0.TinyDB(*list_0, **dict_0)
    assert len(tiny_d_b_0) == 0
    assert module_0.TinyDB.default_table_name == "_default"
    assert (
        f"{type(module_0.TinyDB.storage).__module__}.{type(module_0.TinyDB.storage).__qualname__}"
        == "builtins.property"
    )
    var_0 = tiny_d_b_0.__len__()
    assert var_0 == 0
    var_1 = tiny_d_b_0.__enter__()
    none_type_0 = tiny_d_b_0.drop_table(str_0)
    var_2 = tiny_d_b_0.__exit__()
    var_0.insert_multiple(var_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "]asGzjK4^~Vx"
    list_0 = [str_0]
    dict_0 = {}
    tiny_d_b_0 = module_0.TinyDB(*list_0, **dict_0)
    assert len(tiny_d_b_0) == 0
    assert module_0.TinyDB.default_table_name == "_default"
    assert (
        f"{type(module_0.TinyDB.storage).__module__}.{type(module_0.TinyDB.storage).__qualname__}"
        == "builtins.property"
    )
    var_0 = tiny_d_b_0.__len__()
    assert var_0 == 0
    var_1 = tiny_d_b_0.table(str_0, **dict_0)
    var_2 = tiny_d_b_0.__repr__()
    assert (
        var_2
        == "<TinyDB tables=[], tables_count=0, default_table_documents_count=0, all_tables_documents_count=[]>"
    )
    var_3 = tiny_d_b_0.__enter__()
    none_type_0 = tiny_d_b_0.drop_table(str_0)
    var_4 = tiny_d_b_0.__exit__()
    var_5 = dict_0.__repr__()
    tiny_d_b_0.__getattr__(var_2)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "]asGzjK4^~Vx"
    list_0 = [str_0]
    dict_0 = {}
    tiny_d_b_0 = module_0.TinyDB(*list_0, **dict_0)
    assert len(tiny_d_b_0) == 0
    assert module_0.TinyDB.default_table_name == "_default"
    assert (
        f"{type(module_0.TinyDB.storage).__module__}.{type(module_0.TinyDB.storage).__qualname__}"
        == "builtins.property"
    )
    var_0 = tiny_d_b_0.__len__()
    assert var_0 == 0
    var_1 = tiny_d_b_0.__repr__()
    assert (
        var_1
        == "<TinyDB tables=[], tables_count=0, default_table_documents_count=0, all_tables_documents_count=[]>"
    )
    none_type_0 = tiny_d_b_0.drop_table(str_0)
    var_2 = tiny_d_b_0.__exit__()
    var_3 = var_2.__repr__()
    tiny_d_b_0.__getattr__(var_1)


