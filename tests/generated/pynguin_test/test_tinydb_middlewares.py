# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import tinydb.middlewares as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 2272
    caching_middleware_0 = module_0.CachingMiddleware(int_0)
    assert caching_middleware_0.storage is None
    assert caching_middleware_0.cache is None
    assert module_0.CachingMiddleware.WRITE_CACHE_SIZE == 1000
    caching_middleware_0.read()


def test_case_1():
    bytes_0 = b"\xcb\x96\xab\x14q_&\xedm\xfa"
    caching_middleware_0 = module_0.CachingMiddleware(bytes_0)
    assert caching_middleware_0.storage is None
    assert caching_middleware_0.cache is None
    assert module_0.CachingMiddleware.WRITE_CACHE_SIZE == 1000
    var_0 = caching_middleware_0.write(bytes_0)


def test_case_2():
    str_0 = "k1(gL}q)5m"
    caching_middleware_0 = module_0.CachingMiddleware(str_0)
    assert caching_middleware_0.storage is None
    assert caching_middleware_0.cache is None
    assert module_0.CachingMiddleware.WRITE_CACHE_SIZE == 1000
    none_type_0 = None
    caching_middleware_1 = module_0.CachingMiddleware(none_type_0)
    assert caching_middleware_1.storage is None
    assert caching_middleware_1.cache is None
    var_0 = caching_middleware_0.flush()


def test_case_3():
    bytes_0 = b"\xcb\x96\xab\x14q_&\xedm\xfa"
    middleware_0 = module_0.Middleware(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    none_type_1 = None
    list_0 = [none_type_1, none_type_0, none_type_1, none_type_0]
    str_0 = ""
    str_1 = "cfB%2$7tH"
    set_0 = {none_type_0}
    dict_0 = {str_0: list_0, str_1: set_0, str_0: none_type_0}
    caching_middleware_0 = module_0.CachingMiddleware(none_type_0)
    assert caching_middleware_0.storage is None
    assert caching_middleware_0.cache is None
    assert module_0.CachingMiddleware.WRITE_CACHE_SIZE == 1000
    caching_middleware_0.__call__(*list_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bool_0 = False
    int_0 = -4782
    middleware_0 = module_0.Middleware(int_0)
    none_type_0 = None
    caching_middleware_0 = module_0.CachingMiddleware(none_type_0)
    assert caching_middleware_0.storage is None
    assert caching_middleware_0.cache is None
    assert module_0.CachingMiddleware.WRITE_CACHE_SIZE == 1000
    middleware_1 = module_0.Middleware(bool_0)
    middleware_1.__getattr__(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    caching_middleware_0 = module_0.CachingMiddleware(none_type_0)
    assert caching_middleware_0.storage is None
    assert caching_middleware_0.cache is None
    assert module_0.CachingMiddleware.WRITE_CACHE_SIZE == 1000
    caching_middleware_0.close()


@pytest.mark.xfail(strict=True)
def test_case_7():
    none_type_0 = None
    caching_middleware_0 = module_0.CachingMiddleware(none_type_0)
    assert caching_middleware_0.storage is None
    assert caching_middleware_0.cache is None
    assert module_0.CachingMiddleware.WRITE_CACHE_SIZE == 1000
    var_0 = caching_middleware_0.write(caching_middleware_0)
    caching_middleware_0.close()


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    caching_middleware_0 = module_0.CachingMiddleware(none_type_0)
    assert caching_middleware_0.storage is None
    assert caching_middleware_0.cache is None
    assert module_0.CachingMiddleware.WRITE_CACHE_SIZE == 1000
    var_0 = caching_middleware_0.write(none_type_0)
    var_1 = caching_middleware_0.write(caching_middleware_0)
    caching_middleware_1 = module_0.CachingMiddleware(var_1)
    assert caching_middleware_1.storage is None
    var_2 = caching_middleware_0.read()
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "tinydb.middlewares.CachingMiddleware"
    )
    assert var_2.storage is None
    var_3 = caching_middleware_1.flush()
    caching_middleware_2 = module_0.CachingMiddleware(var_1)
    assert caching_middleware_2.storage is None
    var_4 = var_2.write(var_0)
    var_2.__getattr__(var_4)
